//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user_info"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub user_id: i32,
    pub user_name: String,
    pub user_email: String,
    pub user_password: String,
    pub user_phone: String,
    pub user_address: String,
    pub user_city: String,
    pub user_state: String,
    pub user_zip: String,
    pub user_country: String,
    pub user_role: String,
    pub user_status: String,
    pub user_created_at: DateTime,
    pub user_updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserId,
    UserName,
    UserEmail,
    UserPassword,
    UserPhone,
    UserAddress,
    UserCity,
    UserState,
    UserZip,
    UserCountry,
    UserRole,
    UserStatus,
    UserCreatedAt,
    UserUpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserId => ColumnType::Integer.def(),
            Self::UserName => ColumnType::String(Some(50u32)).def(),
            Self::UserEmail => ColumnType::String(Some(50u32)).def(),
            Self::UserPassword => ColumnType::String(Some(50u32)).def(),
            Self::UserPhone => ColumnType::String(Some(50u32)).def(),
            Self::UserAddress => ColumnType::String(Some(50u32)).def(),
            Self::UserCity => ColumnType::String(Some(50u32)).def(),
            Self::UserState => ColumnType::String(Some(50u32)).def(),
            Self::UserZip => ColumnType::String(Some(50u32)).def(),
            Self::UserCountry => ColumnType::String(Some(50u32)).def(),
            Self::UserRole => ColumnType::String(Some(50u32)).def(),
            Self::UserStatus => ColumnType::String(Some(50u32)).def(),
            Self::UserCreatedAt => ColumnType::DateTime.def(),
            Self::UserUpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
